<!DOCTYPE html>
<html data-bs-theme="light" lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  <title>Manage Budget - Brand</title>
  <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <!-- Navbar -->
    <!-- Navigation Bar -->
    <%- include('templates/navbar') %>

  <!-- Page Header -->
  <header class="pt-5 mt-5">
    <div class="container pt-4 pt-xl-5">
      <div class="row">
        <div class="col text-center">
          <h1 class="display-5 fw-bold">Manage Your Budget</h1>
          <p class="text-muted mb-4">Set spending limits for each category and keep track of your overall financial goals.</p>
        </div>
      </div>
    </div>
  </header>

  <!-- Budget Form Section -->
  <section class="py-4 bg-light">
    <div class="container">
      <h2 class="h4 mb-3">Set Monthly Budget</h2>
      <form id="goalForm" class="row g-3 align-items-center">
        <div class="col-md-4">
          <label for="selectCategory" class="form-label fw-semibold">Category</label>
          <select class="form-select" id="selectCategory" name="category" required>
            <option value="" selected disabled>Select a category</option>
            <option value="total">Total Budget</option>
            <option value="groceries">Groceries</option>
            <option value="entertainment">Entertainment</option>
            <option value="dining out">Dining out</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="col-md-4">
          <label for="inputBudgetAmount" class="form-label fw-semibold">Budget Amount</label>
          <input type="number" class="form-control" id="inputBudgetAmount" name="amount" min="0" placeholder="e.g., 200" required>
        </div>
        <div class="col-auto">
          <label class="form-label fw-semibold invisible">Button</label>
          <button type="submit" class="btn btn-primary d-block">Add / Update</button>
        </div>
        <input type="hidden" id="goalId" name="goalId" value="">
        <input type="hidden" id="formAction" name="formAction" value="add">
      </form>
      <div id="formMessage" class="mt-3"></div>
    </div>
  </section>

  <!-- Budget Table Section -->
  <section class="py-4">
    <div class="container">
      <h2 class="h4 mb-3">Current Budget Allocations</h2>
      <div class="table-responsive">
        <table class="table align-middle">
          <thead class="table-light">
            <tr>
              <th scope="col">Category</th>
              <th scope="col">Monthly Limit</th>
              <th scope="col" class="text-end">Actions</th>
            </tr>
          </thead>
          <tbody id="goalTableBody">
            <!-- Goals will be loaded here dynamically -->
          </tbody>
        </table>
      </div>
      <div id="noGoalsMessage" class="text-center py-3 d-none">
        <p class="text-muted">No budget goals set. Use the form above to add your first budget goal.</p>
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      loadGoals();
      
      // Handle form submission
      const goalForm = document.getElementById('goalForm');
      goalForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(goalForm);
        const category = formData.get('category');
        const amount = formData.get('amount');
        const goalId = formData.get('goalId');
        const formAction = formData.get('formAction');
        
        if (formAction === 'add') {
          // Add new goal
          fetch('/manage/goals', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ category, amount }),
          })
          .then(response => response.json())
          .then(data => {
            if (data.message && data.message.includes('already exists')) {
              showMessage('A goal for this category already exists. Use Edit button to update it.', 'warning');
            } else {
              showMessage('Budget goal added successfully!', 'success');
              resetForm();
              loadGoals();
            }
          })
          .catch(error => {
            showMessage('Error adding goal: ' + error, 'danger');
          });
        } else if (formAction === 'edit') {
          // Update existing goal
          fetch(`/manage/goals/${goalId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ amount }),
          })
          .then(response => response.json())
          .then(data => {
            showMessage('Budget goal updated successfully!', 'success');
            resetForm();
            loadGoals();
          })
          .catch(error => {
            showMessage('Error updating goal: ' + error, 'danger');
          });
        }
      });
      
      // Function to load goals
      function loadGoals() {
        fetch('/manage/goals')
          .then(response => response.json())
          .then(goals => {
            const tableBody = document.getElementById('goalTableBody');
            const noGoalsMessage = document.getElementById('noGoalsMessage');
            
            tableBody.innerHTML = '';
            
            if (goals.length === 0) {
              noGoalsMessage.classList.remove('d-none');
            } else {
              noGoalsMessage.classList.add('d-none');
              
              goals.forEach(goal => {
                const row = document.createElement('tr');
                
                // Format the category for display (capitalize first letter)
                let displayCategory = goal.category.charAt(0).toUpperCase() + goal.category.slice(1);
                if (goal.category === 'dining out') {
                  displayCategory = 'Dining Out';
                }
                
                row.innerHTML = `
                  <td>${displayCategory}</td>
                  <td>$${parseFloat(goal.amount).toFixed(2)}</td>
                  <td class="text-end">
                    <button class="btn btn-sm btn-outline-secondary edit-goal" data-id="${goal.id}" data-category="${goal.category}" data-amount="${goal.amount}">Edit</button>
                    <button class="btn btn-sm btn-outline-danger delete-goal" data-id="${goal.id}">Remove</button>
                  </td>
                `;
                
                tableBody.appendChild(row);
              });
              
              // Add edit button event listeners
              document.querySelectorAll('.edit-goal').forEach(button => {
                button.addEventListener('click', function() {
                  const id = this.getAttribute('data-id');
                  const category = this.getAttribute('data-category');
                  const amount = this.getAttribute('data-amount');
                  
                  document.getElementById('selectCategory').value = category;
                  document.getElementById('inputBudgetAmount').value = amount;
                  document.getElementById('goalId').value = id;
                  document.getElementById('formAction').value = 'edit';
                  
                  // Disable category selection when editing
                  document.getElementById('selectCategory').disabled = true;
                  
                  // Change button text
                  document.querySelector('#goalForm button[type="submit"]').textContent = 'Update Goal';
                });
              });
              
              // Add delete button event listeners
              document.querySelectorAll('.delete-goal').forEach(button => {
                button.addEventListener('click', function() {
                  if (confirm('Are you sure you want to delete this budget goal?')) {
                    const id = this.getAttribute('data-id');
                    
                    fetch(`/manage/goals/${id}`, {
                      method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                      showMessage('Budget goal deleted successfully!', 'success');
                      loadGoals();
                    })
                    .catch(error => {
                      showMessage('Error deleting goal: ' + error, 'danger');
                    });
                  }
                });
              });
            }
          })
          .catch(error => {
            showMessage('Error loading goals: ' + error, 'danger');
          });
      }
      
      // Helper function to reset form
      function resetForm() {
        document.getElementById('goalForm').reset();
        document.getElementById('goalId').value = '';
        document.getElementById('formAction').value = 'add';
        document.getElementById('selectCategory').disabled = false;
        document.querySelector('#goalForm button[type="submit"]').textContent = 'Add / Update';
      }
      
      // Helper function to show messages
      function showMessage(message, type) {
        const messageDiv = document.getElementById('formMessage');
        messageDiv.innerHTML = `<div class="alert alert-${type}" role="alert">${message}</div>`;
        
        // Auto-hide the message after 5 seconds
        setTimeout(() => {
          messageDiv.innerHTML = '';
        }, 5000);
      }
    });
  </script>

  <%- include('templates/footer') %>
</body>

</html>
